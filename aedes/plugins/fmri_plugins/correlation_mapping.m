function correlation_mapping(DATA,ROI,AddInfo)
%
% An Aedes plugin that calculates resting state funtional connectivity from
% seed ROIs.


% Only accept 3D or 4D data
if AddInfo.isDataMixed || ndims(DATA{1}.FTDATA)==2
  errordlg('Only 3D or 4D can be used with this plugin.','Error',...
    'modal');
  return
end

% If no ROIs are defined there is nothing to do here...
if isempty(ROI)
  errordlg('No ROIs defined.','Error',...
    'modal');
  return
end

% Prompt for filter parameters
[cancelled,lowpass,hipass,detrending,...
  reserve_mean,smoothing,global_normalization,TR]=l_FilterPrompt;
if cancelled
  return
end
data=DATA{1}.FTDATA;

% Get the ROIs from current slice/volume
if ndims(data)==3
  % Data volume upon which to show the maps
  vol = data(:,:,1);
  for ii=1:length(ROI)
    ROI(ii).voxels{1} = ROI(ii).voxels{1}(:,:,AddInfo.CurrentSlice(3));
  end
else
  vol = data(:,:,:,1);
  for ii=1:length(ROI)
    ROI(ii).voxels{1} = ROI(ii).voxels{1}(:,:,:,AddInfo.CurrentVol);
  end
end

% Do global normalization
if global_normalization
  data = fmri_global_norm(data);
end

% Spatially smooth data
if ~isempty(smoothing)
  data = fmri_smooth(data,smoothing);
end

% Do fMRI filtering
if ~isempty(lowpass) || ~isempty(hipass) || detrending
  if detrending
    val_trend = 'on';
  else
    val_trend = 'off';
  end
  if reserve_mean
    val_mean = 'on';
  else
    val_mean = 'off';
  end
  data = fmri_filter(data,TR,'detrending',val_trend,...
    'lowpass',lowpass,'hipass',hipass,...
    'reservemean',val_mean);
end

% Correlate seeds
corrmap = fmri_corr(data,ROI);

% Display results in a new Aedes window
dt = repmat(vol,[1 1 1 length(corrmap)]);
rs_maps = zeros(size(corrmap(1).ccc,1),size(corrmap(1).ccc,2),...
  size(corrmap(1).ccc,3),length(corrmap));
for kk=1:length(corrmap)
  rs_maps(:,:,:,kk) = corrmap(kk).ccc;
end
aedes(dt,[],rs_maps)



%% --------------------------------------
function [cancelled,lowpass,hipass,detrending,reserve_mean,smoothing,global_normalization,TR]=l_FilterPrompt()

GD=aedes_gui_defaults;

% Defaults
if ~ispref('Aedes','CorrelationMapping')
  hipass = [];
  lowpass = 0.08;
  detrending = true;
  smoothpr = false;
  reserve_mean = true;
  global_normalization = true;
  smoothing = [2 2 1];
  TR = 2;
else
  tmp=getpref('Aedes','CorrelationMapping');
  hipass=tmp.hipass;
  lowpass=tmp.lowpass;
  detrending=tmp.detrending;
  reserve_mean=tmp.reserve_mean;
  global_normalization=tmp.global_normalization;
  smoothing=tmp.smoothing;
  TR=tmp.TR;
end
if isempty(smoothing)
  do_smoothing = false;
else
  do_smoothing = true;
end
cancelled = false;

fig_h = 410;
fig_w = 300;
scrsz = get(0,'screensize');
fh = figure('position',[(scrsz(3)-fig_w)/2 ...
  (scrsz(4)-fig_h)/2 fig_w fig_h],...
  'menubar','none',...
  'Name','Correlation mapping options',...
  'Numbertitle','off',...
  'closereq','uiresume(gcbf)',...
  'Color',GD.col.mainfig);

% Low pass filter options
lp_uipanel_height = 80;
lph = uipanel('parent',fh,...
  'units','pixel',...
  'position',[5 fig_h-lp_uipanel_height ...
  fig_w-10 lp_uipanel_height],...
  'Title','Low-pass options',...
  'backgroundcolor',GD.col.frame);

tmp = get(lph,'position');
use_lowpass_h = uicontrol('parent',lph,...
  'units','pixel',...
  'position',[5 tmp(4)-40 tmp(3)-50 20],...
  'string','Low-pass filter data',...
  'style','checkbox',...
  'value',false,...
  'callback',...
  ['if get(gcbo,''value''),set(get(gcbo,''userdata''),''enable'',''on''),',...
  'else,set(get(gcbo,''userdata''),''enable'',''off''),end'],...
  'backgroundcolor',GD.col.frame);

tmp = get(use_lowpass_h,'position');
lp_cutoff_tx = uicontrol('parent',lph,...
  'position',[25 tmp(2)-30 tmp(3)-50 20],...
  'string','Low-pass filter cut-off:',...
  'style','text',...
  'horizontalalign','left',...
  'enable','off',...
  'backgroundcolor',GD.col.frame);

tmp = get(lp_cutoff_tx,'position');
lp_cutoff_h = uicontrol('parent',lph,...
  'units','pixel',...
  'position',[tmp(1)+tmp(3) tmp(2) 50 25],...
  'style','edit',...
  'string',num2str(lowpass),...
  'enable','off',...
  'backgroundcolor','w');

set(use_lowpass_h,'userdata',[lp_cutoff_tx,lp_cutoff_h]);

if ~isempty(lowpass)
  set(lp_cutoff_h,'string',num2str(lowpass))
  set(use_lowpass_h,'value',1)
  set([lp_cutoff_tx,lp_cutoff_h],'enable','on')
end

% Hipass filter options
hp_uipanel_height = 110;
tmp = get(lph,'position');
hph = uipanel('parent',fh,...
  'units','pixel',...
  'position',[5 fig_h-hp_uipanel_height-tmp(4)-5 ...
  fig_w-10 hp_uipanel_height],...
  'Title','High-pass options',...
  'backgroundcolor',GD.col.frame);

tmp = get(hph,'position');
use_hipass_h = uicontrol('parent',hph,...
  'units','pixel',...
  'position',[5 tmp(4)-40 tmp(3)-50 20],...
  'string','High-pass filter data',...
  'style','checkbox',...
  'value',false,...
  'callback',...
  ['if get(gcbo,''value''),',...
  'if get(getappdata(gcbo,''detrend_checkbox''),''value''),',...
  'set(getappdata(gcbo,''detrend_checkbox''),''enable'',''on'');',...
  'else,set(get(gcbo,''userdata''),''enable'',''on'');end,',...
  'else,set(get(gcbo,''userdata''),''enable'',''off'');end'],...
  'backgroundcolor',GD.col.frame);

tmp = get(use_hipass_h,'position');
hp_cutoff_tx = uicontrol('parent',hph,...
  'position',[25 tmp(2)-30 tmp(3)-50 20],...
  'string','High-pass filter cut-off:',...
  'style','text',...
  'horizontalalign','left',...
  'enable','off',...
  'backgroundcolor',GD.col.frame);

tmp = get(hp_cutoff_tx,'position');
hp_cutoff_h = uicontrol('parent',hph,...
  'units','pixel',...
  'position',[tmp(1)+tmp(3) tmp(2) 50 25],...
  'style','edit',...
  'string',num2str(hipass),...
  'enable','off',...
  'backgroundcolor','w');

hp_detrend_h = uicontrol('parent',hph,...
  'units','pixel',...
  'position',[25 tmp(2)-30 tmp(3) 25],...
  'style','checkbox',...
  'string','Remove only linear trend',...
  'enable','off',...
  'value',false,...
  'callback',...
  ['if get(gcbo,''value''),',...
  'set(get(gcbo,''userdata''),''enable'',''off''),',...
  'else,set(get(gcbo,''userdata''),''enable'',''on''),end'],...
  'backgroundcolor',GD.col.frame);


set(use_hipass_h,'userdata',[hp_cutoff_tx,hp_cutoff_h,hp_detrend_h]);
set(hp_detrend_h,'userdata',[hp_cutoff_tx,hp_cutoff_h])
setappdata(use_hipass_h,'detrend_checkbox',hp_detrend_h)

if ~isempty(hipass)
  set(use_hipass_h,'value',1)
  set([hp_cutoff_tx,hp_cutoff_h,hp_detrend_h],'enable','on')
end
if detrending
  set(hp_detrend_h,'value',1,'enable','on')
  set([hp_cutoff_tx,hp_cutoff_h],'enable','off')
  set(use_hipass_h,'value',1)
end


% Other options
other_uipanel_height = 160;
tmp = get(hph,'position');
oph = uipanel('parent',fh,...
  'units','pixel',...
  'position',[tmp(1) tmp(2)-other_uipanel_height-5 ...
  fig_w-10 other_uipanel_height],...
  'Title','Other options',...
  'backgroundcolor',GD.col.frame);

tmp=get(oph,'position');
tr_tx = uicontrol('parent',oph,...
  'units','pixel',...
  'position',[5 tmp(4)-40 tmp(3)-50-10 20],...
  'string','Repetition time (TR):',...
  'style','text',...
  'horizontalalign','left',...
  'enable','on',...
  'backgroundcolor',GD.col.frame);

tmp = get(tr_tx,'position');
tr_h = uicontrol('parent',oph,...
  'units','pixel',...
  'position',[tmp(1)+tmp(3) tmp(2) 50 25],...
  'style','edit',...
  'string',num2str(TR),...
  'enable','on',...
  'backgroundcolor','w');


resmean_h = uicontrol('parent',oph,...
  'units','pixel',...
  'position',[tmp(1) tmp(2)-25 tmp(3) 20],...
  'style','checkbox',...
  'string','Reserve mean',...
  'enable','on',...
  'value',reserve_mean,...
  'backgroundcolor',GD.col.frame);

tmp=get(resmean_h,'position');
globalnorm_h = uicontrol('parent',oph,...
  'units','pixel',...
  'position',[tmp(1) tmp(2)-25 tmp(3) 20],...
  'style','checkbox',...
  'string','Global normalization',...
  'enable','on',...
  'value',global_normalization,...
  'backgroundcolor',GD.col.frame);

tmp=get(globalnorm_h,'position');
smooting_h = uicontrol('parent',oph,...
  'units','pixel',...
  'position',[tmp(1) tmp(2)-25 tmp(3) 20],...
  'style','checkbox',...
  'string','Smooth data',...
  'enable','on',...
  'value',do_smoothing,...
  'callback',...
  ['if get(gcbo,''value''),set(get(gcbo,''userdata''),''enable'',''on''),',...
  'else,set(get(gcbo,''userdata''),''enable'',''off''),end'],...
  'backgroundcolor',GD.col.frame);

tmp=get(smooting_h,'position');
smooth_kernel_tx = uicontrol('parent',oph,...
  'position',[25 tmp(2)-30 tmp(3)-60 20],...
  'string','Smoothing kernel FWHM:',...
  'style','text',...
  'horizontalalign','left',...
  'enable','off',...
  'backgroundcolor',GD.col.frame);

tmp = get(smooth_kernel_tx,'position');
smooth_kernel_h = uicontrol('parent',oph,...
  'units','pixel',...
  'position',[tmp(1)+tmp(3) tmp(2) 60 25],...
  'style','edit',...
  'string',num2str(smoothing),...
  'enable','off',...
  'backgroundcolor','w');
if do_smoothing
  set([smooth_kernel_tx,smooth_kernel_h],'enable','on');
end

set(smooting_h,'userdata',[smooth_kernel_tx,smooth_kernel_h]);


% Ok & Cancel buttons
btn_w = 80;
btn_h = 35;
ok_btn_h = uicontrol('parent',fh,...
  'units','pixel',...
  'position',[fig_w-btn_w*2-10 5 btn_w btn_h],...
  'style','pushbutton',...
  'string','OK',...
  'enable','on',...
  'userdata',false,...
  'callback','set(gcbo,''userdata'',true),uiresume(gcbf)');

cancel_btn_h = uicontrol('parent',fh,...
  'units','pixel',...
  'position',[fig_w-btn_w-5 5 btn_w btn_h],...
  'style','pushbutton',...
  'string','Cancel',...
  'enable','on',...
  'callback','uiresume(gcbf)');

% Wait for gui
uiwait(fh);

% Check if canceled
if ~ishandle(fh) || ~get(ok_btn_h,'userdata')
  % Cancelled
  cancelled = true;
  delete(fh)
  return
end

% Get gui values
if get(use_lowpass_h,'value')
  lowpass = str2num(get(lp_cutoff_h,'string'));
else
  lowpass = [];
end

if get(use_hipass_h,'value')
  if get(hp_detrend_h,'value')
    hipass = [];
    detrending = true;
  else
    hipass = str2num(get(hp_cutoff_h,'string'));
    detrending = false;
  end
else
  hipass = [];
  detrending = false;
end

if get(resmean_h,'value')
  reserve_mean = true;
else
  reserve_mean = false;
end

TR=str2num(get(tr_h,'string'));

if get(globalnorm_h,'value')
  global_normalization = true;
else
  global_normalization = false;
end

if get(smooting_h,'value')
  smoothing = str2num(get(smooth_kernel_h,'string'));
else
  smoothing = [];
end

% Save prefs
pref.hipass=hipass;
pref.lowpass=lowpass;
pref.detrending=detrending;
pref.reserve_mean=reserve_mean;
pref.global_normalization=global_normalization;
pref.smoothing=smoothing;
pref.TR=TR;
setpref('Aedes','CorrelationMapping',pref);

% Close figure window
delete(fh)

