function [ksP,ksN,rsP,rsN] = kspace_reading_alpha(fid_file,param)
%% kspace_reading_xcorr2
% This function reads the kspace of an EPIP experiment from a .fid varian 
% file. It then performs the reconstruction of the image with a cross
% correlation algorithm to correct the odd and even echoes mismatch.
% Finally, it performs a fourier transform to obtain the real space image.
% It can then compare those images to the .fid generated by varian and/or
% save the images in a .nii file.

% param fields (default value):
% param.data (1): specifies if the data used should be the raw Eplus and Eminus
% images or the intertwined images IprimeP and IprimeN

% param.save_nii (1): specifies if the data should be saved in a .nii files

% param.center_kspace (2): specifies the type of kspace centering to be
% applied before the cross correlation
% 0: no centering
% 1: 1D centering (only in the frequency direction)
% 2: 2D centering

% param.nx (64): Must specify the number of lines in the frequency direction

% param.ny (64): Must specify the number of lines in the phase direction

% param.display (1): Specifies if the data should be displayed or not

% param.fdf_comp (1): Specifies if the fdf data should be readed and
% compared

% param.vol_pour (1): specifies the pourcentage of volumes to be
% kept and analysed. 1=all the volumes. 0=only the first volume

%% Parameter verification
if ~exist(fid_file,'file')
    errordlg('Cannot find the fid_file')
end
field_names={'data','save_nii','center_kspace','nx','ny','display','fdf_comp' 'vol_pour'};
default_values=[1 1 2 64 64 1 1 1];
field_verif = isfield(param,field_names);
if ~isempty(find(field_verif,1));
    default_fields = find(field_verif==0);
    for i=default_fields
        param.(field_names{i})=default_values(i);
        % param = setfield(param,field_names{i},default_values(i));
    end
end

%% Reading
[Eplus,Eminus,Rplus,Rminus,navi,param] = read_and_sort_kspace_from_fid(fid_file,param);
if param.fdf_comp
    [data_fdf] = read_and_sort_kspace_from_fdf(fid_file,param);
end
disp('Done reading')

%% Computing IprimeP and IprimeN
if param.data==1
    disp('Computing IprimeP and IprimeN')
    IprimeP = zeros(param.knx,param.ny,param.knz,param.nt);
    IprimeP(:,1:2:param.ny-1,:,:) = Eplus(:,1:2:param.ny-1,:,:);
    IprimeP(:,2:2:param.ny,:,:) = Eminus(:,2:2:param.ny,:,:);
    IprimeN = zeros(param.knx,param.ny,param.knz,param.nt);
    IprimeN(:,2:2:param.ny,:,:) = Eplus(:,2:2:param.ny,:,:);
    IprimeN(:,1:2:param.ny-1,:,:) = Eminus(:,1:2:param.ny-1,:,:);
    Rplus(:,2:2:param.ny,:,:) = Rminus(:,2:2:param.ny,:,:);
    Rminus(:,1:2:param.ny-1,:,:) = Rplus(:,1:2:param.ny-1,:,:);
    for z=1:param.knz
        for t=1:param.nt
            fftIprimeP(:,:,z,t) = fftshift(fft2(IprimeP(:,:,z,t)));
            fftIprimeN(:,:,z,t) = fftshift(fft2(IprimeN(:,:,z,t)));
        end
    end
elseif param.data==0
    disp('Using the raw scans Eplus and Eminus')
    IprimeP = zeros(param.knx,param.ny,param.knz,param.nt);
    IprimeP(:,1:2:param.ny-1,:,:) = Eplus(:,1:2:param.ny-1,:,:);
    IprimeP(:,2:2:param.ny,:,:) = Eplus(end:-1:1,2:2:param.ny,:,:);
    IprimeN = zeros(param.knx,param.ny,param.knz,param.nt);
    IprimeN(:,2:2:param.ny,:,:) = Eminus(:,2:2:param.ny,:,:);
    IprimeN(:,1:2:param.ny-1,:,:) = Eminus(end:-1:1,1:2:param.ny-1,:,:);
    Rplus(:,2:2:param.ny,:,:) = Rplus(end:-1:1,2:2:param.ny,:,:);
    Rminus(:,1:2:param.ny-1,:,:) = Rminus(end:-1:1,1:2:param.ny-1,:,:);
    for z=1:param.knz
        for t=1:param.nt
            fftIprimeP(:,:,z,t) = fftshift(fft2(IprimeP(:,:,z,t)));
            fftIprimeN(:,:,z,t) = fftshift(fft2(IprimeN(:,:,z,t)));
        end
    end
end

% Display IprimeP and IprimeN
if param.display
    t=4; z=3;
    figure(1)
    %     for z=1:param.knz
    subplot(2,4,1); imagesc(log(abs(Eplus(:,:,z,t)))); title('abs Eplus')
    subplot(2,4,2); imagesc(log(abs(IprimeP(:,:,z,t)))); title('abs IprimeP')
    subplot(2,4,3); imagesc(angle(IprimeP(:,:,z,t))); title('angle IprimeP')
    subplot(2,4,4); imagesc(abs(fftIprimeP(:,:,z,t))); title('fftIprimeP')
    subplot(2,4,5); imagesc(log(abs(Eminus(:,:,z,t)))); title('abs Eminus')
    subplot(2,4,6); imagesc(log(abs(IprimeN(:,:,z,t)))); title('abs IprimeN')
    subplot(2,4,7); imagesc(angle(IprimeN(:,:,z,t))); title('angle IprimeN')
    subplot(2,4,8); imagesc(abs(fftIprimeN(:,:,z,t))); title('fftIprimeN')
    % pause;
    %     end
end
% clear Eplus Eminus

%% Center kspace
[IprimePc,IprimeNc,param] = center_kspace(IprimeP,IprimeN,param);
clear IprimeP IprimeN

%% Correct the global phase difference
Rodd = Rplus(:,1:2:end-1,:);
Reven = Rplus(:,2:2:end,:);

z=3;
figure('Name','Rplus')
subplot(2,2,1); imagesc(abs(Rodd(:,:,z))); title('abs fftRodd')
subplot(2,2,2); imagesc(angle(Rodd(:,:,z))); title('angle fftRodd')
subplot(2,2,3); imagesc(abs(Reven(:,:,z))); title('abs fftReven')
subplot(2,2,4); imagesc(angle(Reven(:,:,z))); title('angle fftReven')

for z=1:param.knz
    fitobject{z} = fit(double(abs(Rodd(:,1,z))),double(abs(Reven(:,1,z))),'poly1');
    Ya(:,z) = feval(fitobject{z},real(Rodd(:,1,z)));
    Yb(:,z) = feval(fitobject{z},imag(Rodd(:,1,z)));
    figure
    subplot(2,3,1); plot(real(Rodd(:,1,z))); title(['real fftRodd z=' num2str(z)])
    subplot(2,3,2); plot(real(Reven(:,1,z))); title(['real fftReven z=' num2str(z)])
    subplot(2,3,3); plot(real(Reven(:,1,z))); title(['real fftReven z=' num2str(z)])
    hold on; plot(Ya(:,z),'g'); hold off
    subplot(2,3,4); plot(imag(Rodd(:,1,z))); title(['imag fftRodd z=' num2str(z)])
    subplot(2,3,5); plot(imag(Reven(:,1,z))); title(['imag fftReven z=' num2str(z)])
    subplot(2,3,6); plot(imag(Reven(:,1,z))); title(['imag fftReven z=' num2str(z)])
    hold on; plot(Yb(:,z),'g'); hold off
end


%% Odd and even echoes mismatch correction
disp('Correcting odd and even echoes mismatch with 1D alpha correction')
gauss_2D = fspecial('gaussian',[25,5],11);
% for t=1:param.nt
%     for z=1:param.knz
%         IprimePc(:,:,z,t) = imfilter(IprimePc(:,:,z,t),gauss_2D);
%         IprimeNc(:,:,z,t) = imfilter(IprimeNc(:,:,z,t),gauss_2D);
%     end
% end
IPodd = IprimePc(:,1:2:end,:,:);
IPeven = IprimePc(:,2:2:end,:,:);
INodd = IprimeNc(:,1:2:end,:,:);
INeven = IprimeNc(:,2:2:end,:,:);
IPodd1D = IPodd(:);
IPeven1D = IPeven(:);
INodd1D = INodd(:);
INeven1D = INeven(:);

nb_pix = param.knx*param.ny/2;
nb_slice = param.knz*param.nt;
gauss_1D = fspecial('gaussian',[25,1],11);

for i=1:6
    oddP(:,i) = IPodd1D(nb_pix*(i-1)+1:nb_pix*i);
    evenP(:,i) = IPeven1D(nb_pix*(i-1)+1:nb_pix*i);
    oddN(:,i) = IPodd1D(nb_pix*(i-1)+1:nb_pix*i);
    evenN(:,i) = IPeven1D(nb_pix*(i-1)+1:nb_pix*i);
%     oddP(:,i)=imfilter(oddP(:,i),gauss_1D);
%     evenP(:,i)=imfilter(evenP(:,i),gauss_1D);
%     oddN(:,i)=imfilter(oddN(:,i),gauss_1D);
%     evenN(:,i)=imfilter(evenN(:,i),gauss_1D);

    mask = zeros(param.knx,1);
    mask((1:round(param.knx/8))+7*param.knx/16) = 1;
    mask=repmat(mask,param.ny/2); 
    corrP(:,i) = xcorr(oddP(:,i),evenP(:,i));
    corrN(:,i) = xcorr(oddN(:,i),evenN(:,i));
    
    h=figure(mod(i,6)+1);
    subplot(1,2,1); plot(abs(oddP(:,i))); hold on
    plot(abs(evenP(:,i)),'g'); hold off
    legend('odd','even')
    subplot(1,2,2); plot(abs(corrP(:,i)));
    pause;
end

% clear IprimePc IprimeNc

%% ifft
disp('computing rspace')
for z=1:param.knz
    for t=1:param.nt
        U = ksP(:,:,z,t);
        rsP(:,:,z,t) = abs(fftshift((fft2(U))));
        U = ksN(:,:,z,t);
        rsN(:,:,z,t) = abs(fftshift((fft2(U))));
    end
end

%% Addition of rsP and rsN
rsP = rsP(end:-1:1,:,:,:);
rs = sqrt(rsP.^2+rsN.^2);
%% Display kspace and rspace
if param.display
    t=330; z=2;
    figure(4)
    for z=1:param.knz
        subplot(1,4,1); imagesc((abs(ksP(:,:,z,t)))); axis image; title(['log ksP z=' num2str(z) ' t=' num2str(t)]);
        subplot(1,4,2); imagesc(rsP(:,:,z,t)); axis image; title(['rsP z=' num2str(z) ' t=' num2str(t)]);
        subplot(1,4,3); imagesc((abs(ksN(:,:,z,t)))); axis image; title(['log ksN z=' num2str(z) ' t=' num2str(t)]);
        subplot(1,4,4); imagesc(rsN(:,:,z,t)); axis image; title(['rsN z=' num2str(z) ' t=' num2str(t)]);
        % subplot(1,5,5); imagesc(rs(:,:,z,t)); axis image; title(['rs z=' num2str(z) ' t=' num2str(t)]);
        colormap gray
%         pause;
    end
end
%% Display data_fdf and data_fid
data_kspace = ksP;
data_fid = rsP(param.knx/4:3*param.knx/4+1,[3*ny/4+1:ny 1:3*ny/4],:,:);
if param.fdf_comp && param.display
    disp('Display data_fdf and data_fid')
    display_function(data_fdf,abs(data_kspace),data_fid,'Varian','kspace','xcorr');
end

%% Save in .nii
if param.save_nii
    [pathstr, name, ext] = fileparts(fid_file);
    output_dir=[pathstr filesep name '_recon.nii' filesep];
    if ~exist(output_dir,'dir')
        mkdir(output_dir);
    end
    output_file_rs=[output_dir 'rs_xcorr_type' num2str(param.xcorr_type) '.nii'];
    output_file_ks=[output_dir 'ks_xcorr_type' num2str(param.xcorr_type) '.nii'];
    try
        disp(['Writing ' output_file_rs])
        aedes_write_nifti(data_fid,output_file_rs);
        disp(['Writing ' output_file_ks])
        aedes_write_nifti(data_kspace,output_file_ks);    
    catch exception
        errordlg(['unable to write ' output_file_rs])
    end
end
disp('done')