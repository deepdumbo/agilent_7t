function [ksP,ksN,rsP,rsN] = kspace_reading_kwin(fid_file,param)
%% kspace_reading_xcorr
% This function reads the kspace of an EPIP experiment from a .fid varian
% file. It then performs the correction of the kspace with a cross
% correlation algorithm to correct the odd and even echoes mismatch.
% Finally, it performs a fourier transform to obtain the real space image.
% It can then compare those images to the .fid generated by varian and/or
% save the images in a .nii file.

% param fields (default value):
% param.data (1): specifies if the data used should be the raw Eplus and Eminus
% images or the intertwined images IprimeP and IprimeN

% param.save_nii (1): specifies if the data should be saved in a .nii files

% param.correction (1): specifies the type of correlation to be used.
% 1: Correct odd and even echoes mismatch with the central columns of each scan
% 2: Correct odd and even echoes mismatch with the 2 most correlated odd/even columns of each scan
% 3: Correct odd and even echoes mismatch individually for each column

% param.center_kspace (2): specifies the type of kspace centering to be
% applied before the cross correlation
% 0: no centering
% 1: 1D centering (only in the frequency direction)
% 2: 2D centering

% param.nx (64): Must specify the number of lines in the frequency direction

% param.ny (64): Must specify the number of lines in the phase direction

% param.display (1): Specifies if the data should be displayed or not

% param.fdf_comp (1): Specifies if the fdf data should be readed and
% compared

% param.vol_pour (1): specifies the pourcentage of volumes to be
% kept and analysed. 1=all the volumes. 0=only the first volume

%% Parameter verification
if ~exist(fid_file,'file')
    errordlg('Cannot find the fid_file')
end
field_names={'data','save_nii','correction','center_kspace','nx','ny','display','fdf_comp' 'vol_pour'};
default_values=[1 1 1 2 64 64 1 1 1];
field_verif = isfield(param,field_names);
if ~isempty(find(field_verif,1));
    default_fields = find(field_verif==0);
    for i=default_fields
        param.(field_names{i})=default_values(i);
        % param = setfield(param,field_names{i},default_values(i));
    end
end

%% Reading
[Eplus,Eminus,Rplus,Rminus,navi,param] = read_and_sort_kspace_from_fid(fid_file,param);
if param.fdf_comp
    [data_fdf] = read_and_sort_kspace_from_fdf(fid_file,param);
end
disp('Done reading')

%% Computing IprimeP and IprimeN
disp('Using the raw scans Eplus and Eminus')
IprimeP = zeros(param.knx,param.ny,param.knz,param.nt);
Eodd = Eplus(:,1:2:param.ny-1,:,:);
Eeven = Eplus(end:-1:1,2:2:param.ny,:,:);
IprimeP(:,1:2:param.ny-1,:,:) = Eodd;
IprimeP(:,2:2:param.ny,:,:) = Eeven;
IprimeN = zeros(param.knx,param.ny,param.knz,param.nt);
IprimeN(:,2:2:param.ny,:,:) = Eminus(:,2:2:param.ny,:,:);
IprimeN(:,1:2:param.ny-1,:,:) = Eminus(end:-1:1,1:2:param.ny-1,:,:);
for z=1:param.knz
    for t=1:param.nt
        fftIprimeP(:,:,z,t) = fftshift(fft2(IprimeP(:,:,z,t)));
        fftIprimeN(:,:,z,t) = fftshift(fft2(IprimeN(:,:,z,t)));
        fftEodd(:,:,z,t) = fftshift(fft2(Eodd(:,:,z,t)));
        fftEeven(:,:,z,t) = fftshift(fft2(Eeven(:,:,z,t)));
    end
end

Rplus(:,2:2:param.ny,:,:) = Rplus(end:-1:1,2:2:param.ny,:,:);
Rminus(:,1:2:param.ny-1,:,:) = Rminus(end:-1:1,1:2:param.ny-1,:,:);

%% Display IprimeP and IprimeN
if param.display
    z=3; t=4;
    %     for t=1:param.nt
    figure(1)
    subplot(2,4,1); imagesc(log(abs(Eplus(:,:,z,t)))); title('abs Eplus')
    subplot(2,4,2); imagesc(log(abs(IprimeP(:,:,z,t)))); title('abs IprimeP')
    subplot(2,4,3); imagesc(angle(IprimeP(:,:,z,t))); title('angle IprimeP')
    subplot(2,4,4); imagesc(abs(fftIprimeP(:,:,z,t))); title(['fftIprimeP z=' num2str(z) ' t=' num2str(t)])
    subplot(2,4,5); imagesc(log(abs(Eminus(:,:,z,t)))); title('abs Eminus')
    subplot(2,4,6); imagesc(log(abs(IprimeN(:,:,z,t)))); title('abs IprimeN')
    subplot(2,4,7); imagesc(angle(IprimeN(:,:,z,t))); title('angle IprimeN')
    subplot(2,4,8); imagesc(abs(fftIprimeN(:,:,z,t))); title(['fftIprimeN z=' num2str(z) ' t=' num2str(t)])
    colormap gray
    %     pause
    %     end
    figure(2)
    subplot(2,4,1); imagesc(log(abs(Eplus(:,:,z,t)))); title('abs Eplus')
    subplot(2,4,2); imagesc(log(abs(Eodd(:,:,z,t)))); title('abs Eodd')
    subplot(2,4,3); imagesc(angle(Eodd(:,:,z,t))); title('angle Eodd')
    subplot(2,4,4); imagesc(abs(fftEodd(:,:,z,t))); title(['fftEodd z=' num2str(z) ' t=' num2str(t)])
    subplot(2,4,5); imagesc(log(abs(Eminus(:,:,z,t)))); title('abs Eminus')
    subplot(2,4,6); imagesc(log(abs(Eeven(:,:,z,t)))); title('abs Eeven')
    subplot(2,4,7); imagesc(angle(Eeven(:,:,z,t))); title('angle Eeven')
    subplot(2,4,8); imagesc(abs(fftEeven(:,:,z,t))); title(['fftEeven z=' num2str(z) ' t=' num2str(t)])
    colormap gray
end
% clear Eplus Eminus

%% Correct for global magnitude difference between odd and even scans
odd_mean_ref = squeeze(mean(mean(abs(Rplus(:,1:2:end-1,:)),1),2));
even_mean_ref = squeeze(mean(mean(abs(Rplus(:,2:2:end,:)),1),2));
diff_mean_ref(1,1,:) = odd_mean_ref-even_mean_ref;
odd_mean = squeeze(mean(mean(mean(abs(IprimeP(:,1:2:end-1,:,:)),4),1),2));
even_mean = squeeze(mean(mean(mean(abs(IprimeP(:,2:2:end,:,:)),4),1),2));
diff_mean(1,1,:) = odd_mean-even_mean;
IprimeP_glob = IprimeP;
IprimeP_glob(:,2:2:end,:,:) = IprimeP(:,2:2:end,:,:)+repmat(diff_mean,[param.knx param.ny/2 1 param.nt]);

for z=1:param.knz
    for t=1:param.nt
        fftIprimeP_glob(:,:,z,t) = fftshift(fft2(IprimeP_glob(:,:,z,t)));
    end
end

z=3;
figure(3)
for t=1:param.nt
    subplot(1,4,1); imagesc(abs(IprimeP(:,:,z,t))); title('abs IprimeP')
    subplot(1,4,2); imagesc(abs(fftIprimeP(:,:,z,t))); title('abs fftIprimeP')
    subplot(1,4,3); imagesc(abs(IprimeP_glob(:,:,z,t))); title('abs IprimeP_glob')
    subplot(1,4,4); imagesc(abs(fftIprimeP(:,:,z,t))); title(['fftIprimeP_glob z=' num2str(z) ' t=' num2str(t)])
    colormap gray
    pause
end

%% Odd and even echoes mismatch correction using the reference scans
disp('Correcting odd and even echoes mismatch with reference scans')
inc=0.01;
ksP = IprimeP;
central_position = param.knx/2;
if param.correction==1
    for z=1:param.knz
        odd = mean(Rplus(:,[1 3],z),2);
        even = Rplus(:,2,z);
        cross_corr = xcorr(odd,even);
        % Rough maximum
        [~,rough_max(z)] = max(cross_corr);
        roi_begin = rough_max(z)-5;
        roi_end = rough_max(z)+5;
        roi_corr = roi_begin:roi_end;
        interest_corr = cross_corr(roi_corr);
        roi_spline = roi_begin:inc:roi_end;
        spline_corr = spline(roi_corr,interest_corr,roi_spline);
        % Precise maximum
        [~,precise_max(z)] = max(spline_corr);
        precise_max(z) = precise_max(z)*inc+roi_begin-param.knx/2;
    end
    for t=1:param.nt
        for z=1:param.knz
            for y=2:2:param.ny
                x=1:param.knx;
                Y=ksP(:,y,z,t);
                xi=(1:param.knx) + central_position - precise_max(z);
                ksP(:,y,z,t) = interp1(x,Y,xi);
            end
        end
    end
    ksP(isnan(ksP)) = 0;    %eliminate the NaN
    
    ksN = IprimeN;
else
    ksP=IprimeP;
    ksN=IprimeN;
end
clear IprimeP IprimeN

%% ifft
disp('computing rspace')
for z=1:param.knz
    for t=1:param.nt
        U = ksP(:,:,z,t);
        rsP(:,:,z,t) = abs(fftshift((fft2(U))));
        U = ksN(:,:,z,t);
        rsN(:,:,z,t) = abs(fftshift((fft2(U))));
    end
end

%% Display kspace and rspace
if param.display
    t=param.nt; z=param.knz;
    figure(4)
    %     for z=1:param.knz
    subplot(1,4,1); imagesc((abs(ksP(:,:,z,t)))); axis image; title(['log ksP z=' num2str(z) ' t=' num2str(t)]);
    subplot(1,4,2); imagesc(rsP(:,:,z,t)); axis image; title(['rsP z=' num2str(z) ' t=' num2str(t)]);
    subplot(1,4,3); imagesc((abs(ksN(:,:,z,t)))); axis image; title(['log ksN z=' num2str(z) ' t=' num2str(t)]);
    subplot(1,4,4); imagesc(rsN(:,:,z,t)); axis image; title(['rsN z=' num2str(z) ' t=' num2str(t)]);
    % subplot(1,5,5); imagesc(rs(:,:,z,t)); axis image; title(['rs z=' num2str(z) ' t=' num2str(t)]);
    colormap gray
    %         pause;
    %     end
end
%% Display data_fdf and data_fid
data_kspace = ksP;
data_fid = rsP(param.knx/4:3*param.knx/4+1,[3*param.ny/4+1:param.ny 1:3*param.ny/4],:,:);
% data_kspace = IprimeP;
% data_fid = abs(fftIprimeP(param.knx/4:3*param.knx/4+1,:,:,:));
% data_kspace = Eodd;
% data_fid = abs(fftEodd(param.knx/4:3*param.knx/4+1,:,:,:));
% data_kspace = Eeven;
% data_fid = abs(fftEeven(param.knx/4:3*param.knx/4+1,:,:,:));

if param.fdf_comp && param.display
    disp('Display data_fdf and data_fid')
    display_function(data_fdf,abs(data_kspace),data_fid,'Varian','kspace','kwin');
end

%% Save in .nii
if param.save_nii
    data_fid_odd = abs(fftEodd);
    data_fid_even = abs(fftEeven);
    [pathstr, name, ext] = fileparts(fid_file);
    output_dir=[pathstr filesep name '_recon.nii' filesep];
    if ~exist(output_dir,'dir')
        mkdir(output_dir);
    end
    output_file_rs1=[output_dir 'rs_kwin' num2str(param.correction) 'odd.nii'];
    output_file_rs2=[output_dir 'rs_kwin' num2str(param.correction) 'even.nii'];
    try
        disp(['Writing ' output_file_rs1])
        aedes_write_nifti(data_fid_odd,output_file_rs1);
        disp(['Writing ' output_file_rs2])
        aedes_write_nifti(data_fid_even,output_file_rs2);
    catch exception
        errordlg(['unable to write ' output_file_rs])
    end
end
disp('done')