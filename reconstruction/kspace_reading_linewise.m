function [ksP,ksN,rsP,rsN] = kspace_reading_linewise(fid_file,param)
%% kspace_reading_xcorr2
% This function reads the kspace of an EPIP experiment from a .fid varian 
% file. It then performs the correction of the kspace with a cross
% correlation algorithm to correct the odd and even echoes mismatch.
% Finally, it performs a fourier transform to obtain the real space image.
% It can then compare those images to the .fid generated by varian and/or
% save the images in a .nii file.

% param fields (default value):
% param.data (1): specifies if the data used should be the raw Eplus and Eminus
% images or the intertwined images IprimeP and IprimeN

% param.save_nii (1): specifies if the data should be saved in a .nii files

% param.xcorr_type (1): specifies the type of correlation to be used.
% 1: Correct odd and even echoes mismatch with the central columns of each scan
% 2: Correct odd and even echoes mismatch with the 2 most correlated odd/even columns of each scan
% 3: Correct odd and even echoes mismatch individually for each column

% param.center_kspace (2): specifies the type of kspace centering to be
% applied before the cross correlation
% 0: no centering
% 1: 1D centering (only in the frequency direction)
% 2: 2D centering

% param.nx (64): Must specify the number of lines in the frequency direction

% param.ny (64): Must specify the number of lines in the phase direction

% param.display (1): Specifies if the data should be displayed or not

% param.fdf_comp (1): Specifies if the fdf data should be readed and
% compared

% param.vol_pour (1): specifies the pourcentage of volumes to be
% kept and analysed. 1=all the volumes. 0=only the first volume

%% Parameter verification
if ~exist(fid_file,'file')
    errordlg('Cannot find the fid_file')
end
field_names={'data','save_nii','xcorr_type','center_kspace','nx','ny','display','fdf_comp' 'vol_pour'};
default_values=[1 1 1 2 64 64 1 1 1];
field_verif = isfield(param,field_names);
if ~isempty(find(field_verif,1));
    default_fields = find(field_verif==0);
    for i=default_fields
        param.(field_names{i})=default_values(i);
        % param = setfield(param,field_names{i},default_values(i));
    end
end

%% Reading
[Eplus,Eminus,Rplus,Rminus,navi,param] = read_and_sort_kspace_from_fid(fid_file,param);
if param.fdf_comp
    [data_fdf] = read_and_sort_kspace_from_fdf(fid_file,param);
end
disp('Done reading')

%% 1. Collect a reference scan, R+, with phase encode  gradient off 

% 2. Reverse the even echoes
Rplus(1:param.knx,2:2:end,:,:) = Rplus(param.knx:-1:1,2:2:end,:,:);

% 3. FT along the read dimension 
for z=1:param.knz
    for y=1:param.ny
        fftRplus(:,y,z) = fftshift(ifft(Rplus(:,y,z)));
    end
end
z=4;
figure('Name','Rplus')
subplot(1,2,1); imagesc(abs(fftRplus(:,:,z))); title('abs of fftRplus')
subplot(1,2,2); imagesc(angle(fftRplus(:,:,z))); title('angle of fftRplus')

% 4. Determine the phase, P+, of each acquisition line 
linewise_odd = Eplus(:,1,:,:);
linewise_even = Eplus(:,2,:,:);
linewise=[linewise_odd linewise_even];
Pplus = repmat(angle(linewise),[1,param.ny/2,1]);  
figure('Name','Pplus')
imagesc(Pplus(:,:,z)); title('Pplus');

% 5. Collect the EPI data, E+ 

% 6. Reverse the even echoes
Eplus(1:param.knx,2:2:end,:,:) = Eplus(param.knx:-1:1,2:2:end,:,:);

% 7. FT the EPI data along the read dimension 
for t=1:param.nt
    for z=1:param.knz
        for y=1:param.ny
            fftEplus(:,y,z,t) = fftshift(ifft(Eplus(:,y,z,t)));
        end
    end
end
t=param.nt; z=4;
figure('Name','Eplus')
subplot(1,2,1); imagesc(abs(Eplus(:,:,z,t))); title('Eplus')
subplot(1,2,2); imagesc(abs(fftEplus(:,:,z,t))); title('fftEplus')

% 8. Subtract the reference phase obtained in (4) 
% Estarplusphase = angle(fftEplus) - repmat(Pplus,[1 1 1 size(fftEplus,4)]);
Estarplusphase = angle(fftEplus) - Pplus;
a = real(abs(fftEplus).*cos(Estarplusphase));
b = real(abs(fftEplus).*sin(Estarplusphase));
Estarplus = complex(a,b);
z=4; t=4;
figure('Name','Before and after correction')
subplot(1,2,1); imagesc(abs(fftEplus(:,:,z,t))); title('Eplus') 
subplot(1,2,2); imagesc(abs(Estarplus(:,:,z,t))); title('Estarplus') 

% 9. FT along the phase dimension 
for t=1:param.nt
    for z=1:param.knz
        for x=1:param.knx
            fftE(x,:,z,t) = fftshift(ifft(Estarplus(x,:,z,t)));
        end
    end
end

% 10. Calculate the magnitude of the image for display 
t=4; z=4;
figure('Name','E')
subplot(1,2,1); imagesc(abs(Estarplus(:,3:end,z,t))); title('E')
subplot(1,2,2); imagesc(abs(fftE(:,:,z,t))); title('fftE')

%% Display data_fdf and data_fid
data_kspace = Estarplus;
data_fid = abs(fftE(param.knx/4:3*param.knx/4+1,[round(param.ny/3):-1:1 param.ny:-1:round(param.ny/3)+1],:,:));
if param.fdf_comp && param.display
    disp('Display data_fdf and data_fid')
    display_function(data_fdf,abs(data_kspace),data_fid,'Varian','kspace','linewise');
end

