function [ksP,ksN,rsP,rsN] = kspace_reading_xcorr(fid_file,param)
%% kspace_reading_xcorr2
% This function reads the kspace of an EPIP experiment from a .fid varian 
% file. It then performs the correction of the kspace with a cross
% correlation algorithm to correct the odd and even echoes mismatch.
% Finally, it performs a fourier transform to obtain the real space image.
% It can then compare those images to the .fid generated by varian and/or
% save the images in a .nii file.

% param fields (default value):
% param.data (1): specifies if the data used should be the raw Eplus and Eminus
% images or the intertwined images IprimeP and IprimeN

% param.save_nii (1): specifies if the data should be saved in a .nii files

% param.xcorr_type (1): specifies the type of correlation to be used.
% 1: Correct odd and even echoes mismatch with the central columns of each scan
% 2: Correct odd and even echoes mismatch with the 2 most correlated odd/even columns of each scan
% 3: Correct odd and even echoes mismatch individually for each column

% param.center_kspace (2): specifies the type of kspace centering to be
% applied before the cross correlation
% 0: no centering
% 1: 1D centering (only in the frequency direction)
% 2: 2D centering

% param.nx (64): Must specify the number of lines in the frequency direction

% param.ny (64): Must specify the number of lines in the phase direction

% param.display (1): Specifies if the data should be displayed or not

% param.fdf_comp (1): Specifies if the fdf data should be readed and
% compared

% param.vol_pour (1): specifies the pourcentage of volumes to be
% kept and analysed. 1=all the volumes. 0=only the first volume

%% load kspace
[ksraw, data_fdf, param] = kspace_read_aedes(fid_file, param);
knx=param.knx; kny=param.kny; nx=param.nx; ny=param.ny; nz=param.nz; knz=param.knz; nt=param.nt;


%% Definition of the data sets
R1 = ksraw(:,3:end,:,param.acq_order==0);         % Non-phase encoded reference scan (0)
R2 = ksraw(:,3:end,:,param.acq_order==-2);        % Non-phase encoded reference scan with the read gradient polarity reversed (-2)
Eplus = ksraw(:,3:end,:,param.acq_order==1);      % Epi data (1)
Eminus = ksraw(:,3:end,:,param.acq_order==-1);    % Phase-encoded reference scan with the read gradient polarity reversed (-1)
[pathstr name ext] = fileparts(fid_file);
output_file = [pathstr filesep name '_raw.mat']
save(output_file,'ksraw','acq_order','Eplus','Eminus','R1','R2','data_fdf','knx','kny','knz',)
% clear ksraw

%% Computing IprimeP and IprimeN
if param.data==1
    disp('Computing IprimeP and IprimeN')
    IprimeP = zeros(knx,ny,knz,nt);
    IprimeP(:,1:2:ny-1,:,:) = Eplus(:,1:2:ny-1,:,:);
    IprimeP(:,2:2:ny,:,:) = Eminus(:,2:2:ny,:,:);
    IprimeN = zeros(knx,ny,knz,nt);
    IprimeN(:,2:2:ny,:,:) = Eplus(:,2:2:ny,:,:);
    IprimeN(:,1:2:ny-1,:,:) = Eminus(:,1:2:ny-1,:,:);
    for z=1:knz
        for t=1:nt
            fftIprimeP(:,:,z,t) = fftshift(fft2(IprimeP(:,:,z,t)));
            fftIprimeN(:,:,z,t) = fftshift(fft2(IprimeN(:,:,z,t)));
        end
    end
elseif param.data==2
    disp('Using the raw scans Eplus and Eminus')
    IprimeP = zeros(knx,ny,knz,nt);
    IprimeP(:,1:2:ny-1,:,:) = Eplus(:,1:2:ny-1,:,:);
    IprimeP(:,2:2:ny,:,:) = Eminus(end:-1:1,2:2:ny,:,:);
    IprimeN = zeros(knx,ny,knz,nt);
    IprimeN(:,2:2:ny,:,:) = Eplus(:,2:2:ny,:,:);
    IprimeN(:,1:2:ny-1,:,:) = Eminus(end:-1:1,1:2:ny-1,:,:);
    for z=1:knz
        for t=1:nt
            fftIprimeP(:,:,z,t) = fftshift(fft2(IprimeP(:,:,z,t)));
            fftIprimeN(:,:,z,t) = fftshift(fft2(IprimeN(:,:,z,t)));
        end
    end
end

%% Display IprimeP and IprimeN
if param.display
    t=4;
    figure(1)
    for z=1:nz
        subplot(2,4,1); imagesc(log(abs(Eplus(:,:,z,t)))); title('abs Eplus')
        subplot(2,4,2); imagesc(log(abs(IprimeP(:,:,z,t)))); title('abs IprimeP')
        subplot(2,4,3); imagesc(angle(IprimeP(:,:,z,t))); title('angle IprimeP')
        subplot(2,4,4); imagesc(abs(fftIprimeP(:,:,z,t))); title('fftIprimeP')
        subplot(2,4,5); imagesc(log(abs(Eminus(:,:,z,t)))); title('abs Eminus')
        subplot(2,4,6); imagesc(log(abs(IprimeN(:,:,z,t)))); title('abs IprimeN')
        subplot(2,4,7); imagesc(angle(IprimeN(:,:,z,t))); title('angle IprimeN')
        subplot(2,4,8); imagesc(abs(fftIprimeN(:,:,z,t))); title('fftIprimeN')
        % pause;
    end
end
clear Eplus Eminus

%% Center kspace
central_positionx = round(knx/2);
central_positiony = round(kny/2);
if param.center_kspace==1
    disp(['centering kspace with param.center_kspace = ' num2str(param.center_kspace)])
    gauss_1D = fspecial('gaussian',[11,1],2);
    kscrushedt = abs(mean(IprimeP,4));
    kscrushedy = abs(mean(kscrushedt(:,round(3*kny/8):round(5*kny/8),:),2));
    kscrushedysmoothed = imfilter(kscrushedy,gauss_1D);
    [~,central_freq] = max(kscrushedysmoothed,[],1); central_freq=squeeze(central_freq);
    for t=1:nt
        for z=1:knz
            IprimePc(:,:,z,t) = circshift(IprimeP(:,:,z,t),central_positionx-central_freq(z));
        end
    end
    kscrushedt = abs(mean(IprimeN,4));
    kscrushedy = abs(mean(kscrushedt(:,round(3*kny/8):round(5*kny/8),:),2));
    kscrushedysmoothed = imfilter(kscrushedy,gauss_1D);
    [~,central_freq] = max(kscrushedysmoothed,[],1); central_freq=squeeze(central_freq);
    for t=1:nt
        for z=1:knz
            IprimeNc(:,:,z,t) = circshift(IprimeN(:,:,z,t),central_positionx-central_freq(z));
        end
    end
elseif param.center_kspace==2
    disp(['centering kspace with param.center_kspace = ' num2str(param.center_kspace)])
    gauss_2D = fspecial('gaussian',[11,11],3);
    kssmoothed=imfilter(abs(IprimeP),gauss_2D,'same');
    for t=1:nt
        for z=1:nz
            cent = find(kssmoothed(:,:,z,t)==max(max(kssmoothed(:,:,z,t))));
            central_pix = [mod(cent,knx) ceil(cent/knx)];
            IprimePcx(:,:,z,t) = circshift(IprimeP(:,:,z,t),central_positionx-central_pix(1));
            IprimePc(:,:,z,t) = circshift(IprimePcx(:,:,z,t)',central_positiony-central_pix(2))';
        end
    end
    kssmoothed=imfilter(abs(IprimeN),gauss_2D,'same');
    for t=1:nt
        for z=1:nz
            cent = find(kssmoothed(:,:,z,t)==max(max(kssmoothed(:,:,z,t))));
            central_pix = [mod(cent,knx) ceil(cent/knx)];
            IprimeNcx(:,:,z,t) = circshift(IprimeN(:,:,z,t),central_positionx-central_pix(1));
            IprimeNc(:,:,z,t) = circshift(IprimeNcx(:,:,z,t)',central_positiony-central_pix(2))';
        end
    end
    clear IprimePcx IprimeNcx
else
    IprimePc=IprimeP;
    IprimeNc=IprimeN;
end

%% Display centering
if param.display
    z=5;
%     for t=1:nt
        figure(2)
        subplot(2,2,1); imagesc(log(abs(IprimeP(:,:,z,t)))); title(['IprimeP z=' num2str(z) ' t=' num2str(t)]);
        subplot(2,2,2); imagesc(log(abs(IprimePc(:,:,z,t)))); title(['IprimePc z=' num2str(z) ' t=' num2str(t)]);
        subplot(2,2,3); imagesc(log(abs(IprimeN(:,:,z,t)))); title(['IprimeN z=' num2str(z) ' t=' num2str(t)]);
        subplot(2,2,4); imagesc(log(abs(IprimeNc(:,:,z,t)))); title(['IprimeNc z=' num2str(z) ' t=' num2str(t)]);
        %         pause;
%     end
end
clear IprimeP IprimeN

%% Odd and even echoes mismatch correction
disp(['Correcting odd and even echoes mismatch with xcorr_type = ' num2str(param.xcorr_type)])
if param.xcorr_type==1
    %% Correct odd and even echoes mismatch with the central columns of each scan using cross_correlation
    % Define the columns to be used
	central_position = knx/2;
    odd_columns = round(3*ny/8)+1:2:round(5*ny/8)+1;    
    even_columns = round(3*ny/8):2:round(5*ny/8);
    nb_columns = length(odd_columns);
    inc = 0.01;
    gauss_1D = fspecial('gaussian',[round(knx/3),1],round(knx/6));
    
    ksP = IprimePc;
    for t=1:nt
        for z=1:knz
            odds = mean(abs(IprimePc(:,odd_columns,z,t),2));
            [~,odds_max] = max(odds,[],1);
            for y=1:2:ny-1
                ksP(:,y,z,t) = circshift(IprimePc(:,y,z,t),central_position-odds_max);
            end
            for y=1:nb_columns
                odds = abs(ksP(:,odd_columns(y),z,t));
                odds_smoothed = imfilter(odds,gauss_1D);
                evens = abs(ksP(:,even_columns(y),z,t));
                evens_smoothed = imfilter(evens,gauss_1D);
                cross_corr = xcorr(odds_smoothed,evens_smoothed); 
                % Rough maximum
                [~,rough_max_yzt(y,z,t)] = max(cross_corr);   
                roi_begin = rough_max_yzt(y,z,t)-5;
                roi_end = rough_max_yzt(y,z,t)+5;
                roi_corr = roi_begin:roi_end;
                interest_corr = cross_corr(roi_corr);
                roi_spline = roi_begin:inc:roi_end;
                spline_corr = spline(roi_corr,interest_corr,roi_spline);
                % Precise maximum
                [~,precise_max_yzt(y,z,t)] = max(spline_corr);
                precise_max_yzt(y,z,t) = precise_max_yzt(y,z,t)*inc+roi_begin-knx/2;
            end
            % Average of the displacement between the odd and even columns
            precise_max_zt(z,t) = mean(precise_max_yzt(y,z,t),1);
            % rough_max_zt(z,t) = median(rough_max_yzt(y,z,t),1)-knx/2;
            for y=2:2:ny
                x=1:knx;
                Y=ksP(:,y,z,t);
                xi=(1:knx) + central_position - precise_max_zt(z,t);
                % xi=(1:knx) + central_position - rough_max_zt(z,t);
                ksP(:,y,z,t) = interp1(x,Y,xi);
            end
        end
    end
    ksP(isnan(ksP)) = 0;    %eliminate the NaN
    
    ksN = IprimeNc;
    ksabs = abs(IprimeNc);
    for t=1:nt
        for z=1:knz
            odds = mean(ksabs(:,odd_columns,z,t),2);
            [~,odds_max] = max(odds,[],1);
            for y=1:2:ny-1
                ksN(:,y,z,t) = circshift(IprimeNc(:,y,z,t),central_position-odds_max);
            end
            for y=1:nb_columns
                odds = abs(ksN(:,odd_columns(y),z,t));
                odds_smoothed = imfilter(odds,gauss_1D);
                evens = abs(ksN(:,even_columns(y),z,t));
                evens_smoothed = imfilter(evens,gauss_1D);
                cross_corr = xcorr(odds_smoothed,evens_smoothed); 
                % Rough maximum
                [~,rough_max_yzt(y,z,t)] = max(cross_corr);   
                roi_begin = rough_max_yzt(y,z,t)-5;
                roi_end = rough_max_yzt(y,z,t)+5;
                roi_corr = roi_begin:roi_end;
                interest_corr = cross_corr(roi_corr);
                roi_spline = roi_begin:inc:roi_end;
                spline_corr = spline(roi_corr,interest_corr,roi_spline);
                % Precise maximum
                [~,precise_max_yzt(y,z,t)] = max(spline_corr);
                precise_max_yzt(y,z,t) = precise_max_yzt(y,z,t)*inc+roi_begin-knx/2;
            end
            % Average of the displacement between the odd and even columns
            precise_max_zt(z,t) = mean(precise_max_yzt(y,z,t),1);
            % rough_max_zt(z,t) = median(rough_max_yzt(y,z,t),1)-knx/2;
            for y=2:2:ny
                x=1:knx;
                Y=ksN(:,y,z,t);
                xi=(1:knx) + central_position - precise_max_zt(z,t);
                % xi=(1:knx) + central_position - rough_max_zt(z,t);
                ksN(:,y,z,t) = interp1(x,Y,xi);
            end
        end
    end
    ksN(isnan(ksN)) = 0;    %eliminate the NaN
    
elseif param.xcorr_type==2
    %% Correct odd and even echoes mismatch with the 2 most correlated odd/even columns of each scan using cross_correlation
    ksP = IprimePc;
    ksabs = abs(IprimePc);
    central_position = knx/2;
    inc = 0.01;
    gauss_1D = fspecial('gaussian',[round(knx/10),1],round(knx/20));
    for t=1:nt
        for z=1:knz
            % Determine the most correlated odd/even columns of each slices from each scan
            for y=1:ny-1
                auto_corr(y,z,t) = corr(ksabs(:,y,z,t),ksabs(:,y+1,z,t));
            end
            [best_corr(z,t) best_corr_pos(z,t)] = max(auto_corr(:,z,t));
            if mod(best_corr_pos(z,t),2)
                odd_column=best_corr_pos(z,t);
                even_column=best_corr_pos(z,t)+1;
            else
                odd_column=best_corr_pos(z,t)+1;
                even_column=best_corr_pos(z,t);
            end
            % Compute the cross correlation between those 2 columns
            odds = abs(ksP(:,odd_column,z,t));
            odds_smoothed = imfilter(odds,gauss_1D);
            evens = abs(ksP(:,even_column,z,t));
            evens_smoothed = imfilter(evens,gauss_1D);
            cross_corr = xcorr(odds_smoothed,evens_smoothed);     
            % Roughly find the maximum then find the precise maximum by
            % cubic interpolation
            [~,rough_max_zt(z,t)] = max(cross_corr);   
            roi_begin = rough_max_zt(z,t)-5;
            roi_end = rough_max_zt(z,t)+5;
            roi_corr = roi_begin:roi_end;
            interest_corr = cross_corr(roi_corr);
            roi_spline = roi_begin:inc:roi_end;
            spline_corr = spline(roi_corr,interest_corr,roi_spline);
            [~,precise_max_zt(z,t)] = max(spline_corr);
            precise_max_zt(z,t) = precise_max_zt(z,t)*inc+roi_begin-knx/2;
            % Interpolate the new Kspace
            for y=2:2:ny
                x=1:knx;
                Y=ksP(:,y,z,t);
                xi=(1:knx) + central_position - precise_max_zt(z,t);
                ksP(:,y,z,t) = interp1(x,Y,xi);
            end
        end
    end
    ksP(isnan(ksP)) = 0;    %eliminate the NaN
    
    ksN = IprimeNc;
    ksabs = abs(IprimeNc); 
    central_position = knx/2;
    inc = 0.01;
    gauss_1D = fspecial('gaussian',[round(knx/10),1],round(knx/20));
    for t=1:nt
        for z=1:knz
            % Determine the most correlated odd/even columns of each slices from each scan
            for y=1:ny-1
                auto_corr(y,z,t) = corr(ksabs(:,y,z,t),ksabs(:,y+1,z,t));
            end
            [best_corr(z,t) best_corr_pos(z,t)] = max(auto_corr(:,z,t));
            if mod(best_corr_pos(z,t),2)
                odd_column=best_corr_pos(z,t);
                even_column=best_corr_pos(z,t)+1;
            else
                odd_column=best_corr_pos(z,t)+1;
                even_column=best_corr_pos(z,t);
            end
            % Compute the cross correlation between those 2 columns
            odds = abs(ksN(:,odd_column,z,t));
            odds_smoothed = imfilter(odds,gauss_1D);
            evens = abs(ksN(:,even_column,z,t));
            evens_smoothed = imfilter(evens,gauss_1D);
            cross_corr = xcorr(odds_smoothed,evens_smoothed);     
            % Roughly find the maximum then find the precise maximum by
            % cubic interpolation
            [~,rough_max_zt(z,t)] = max(cross_corr);   
            roi_begin = rough_max_zt(z,t)-5;
            roi_end = rough_max_zt(z,t)+5;
            roi_corr = roi_begin:roi_end;
            interest_corr = cross_corr(roi_corr);
            roi_spline = roi_begin:inc:roi_end;
            spline_corr = spline(roi_corr,interest_corr,roi_spline);
            [~,precise_max_zt(z,t)] = max(spline_corr);
            precise_max_zt(z,t) = precise_max_zt(z,t)*inc+roi_begin-knx/2;
            % Interpolate the new Kspace
            for y=2:2:ny
                x=1:knx;
                Y=ksN(:,y,z,t);
                xi=(1:knx) + central_position - precise_max_zt(z,t);
                ksN(:,y,z,t) = interp1(x,Y,xi);
            end
        end
    end
    ksN(isnan(ksN)) = 0;    %eliminate the NaN
    
elseif param.xcorr_type==3
    %% Correct odd and even echoes mismatch individually for each column
    ksP = IprimePc;
    ksabs = abs(IprimePc);
    central_position = knx/2;
    inc = 0.01;
    gauss_1D = fspecial('gaussian',[round(knx/10),1],round(knx/20));
    columns_to_correct=ny/4:2:3*ny/4;
    for t=1:nt
        for z=1:knz
            for y=columns_to_correct
                odd_column=y+1;
                even_column=y;
                % Compute the cross correlation between the 2 columns
                odds = abs(ksP(:,odd_column,z,t));
                odds_smoothed = imfilter(odds,gauss_1D);
                evens = abs(ksP(:,even_column,z,t));
                evens_smoothed = imfilter(evens,gauss_1D);
                cross_corr = xcorr(odds_smoothed,evens_smoothed);
                % Roughly find the maximum then find the precise maximum by
                % cubic interpolation
                [~,rough_max_zt(z,t)] = max(cross_corr);
                roi_begin = rough_max_zt(z,t)-5;
                roi_end = rough_max_zt(z,t)+5;
                roi_corr = roi_begin:roi_end;
                interest_corr = cross_corr(roi_corr);
                roi_spline = roi_begin:inc:roi_end;
                spline_corr = spline(roi_corr,interest_corr,roi_spline);
                [~,precise_max(z,t)] = max(spline_corr);
                precise_max(z,t) = precise_max(z,t)*inc+roi_begin-knx/2;
                % Interpolate the new Kspace
                if y==columns_to_correct(1)
                    for ybegin=2:2:y
                        x=1:knx;
                        Y=ksP(:,ybegin,z,t);
                        xi=(1:knx) + central_position - precise_max(z,t);
                        ksP(:,ybegin,z,t) = interp1(x,Y,xi);
                    end
                elseif y==columns_to_correct(end)
                    for yend=y:2:ny
                        x=1:knx;
                        Y=ksP(:,yend,z,t);
                        xi=(1:knx) + central_position - precise_max(z,t);
                        ksP(:,yend,z,t) = interp1(x,Y,xi);
                    end
                else
                    x=1:knx;
                    Y=ksP(:,y,z,t);
                    xi=(1:knx) + central_position - precise_max(z,t);
                    ksP(:,y,z,t) = interp1(x,Y,xi);
                end
            end
        end
    end
    ksP(isnan(ksP)) = 0;    %eliminate the NaN
    
    ksN = IprimeNc;
    ksabs = abs(IprimeNc);
    central_position = knx/2;
    inc = 0.01;
    gauss_1D = fspecial('gaussian',[round(knx/10),1],round(knx/20));
    for t=1:nt
        for z=1:knz
            % Determine the most correlated odd/even columns of each slices from each scan
            for y=1:ny-1
                auto_corr(y,z,t) = corr(ksabs(:,y,z,t),ksabs(:,y+1,z,t));
            end
            [best_corr(z,t) best_corr_pos(z,t)] = max(auto_corr(:,z,t));
            if mod(best_corr_pos(z,t),2)
                odd_column=best_corr_pos(z,t);
                even_column=best_corr_pos(z,t)+1;
            else
                odd_column=best_corr_pos(z,t)+1;
                even_column=best_corr_pos(z,t);
            end
            % Compute the cross correlation between those 2 columns
            odds = abs(ksN(:,odd_column,z,t));
            odds_smoothed = imfilter(odds,gauss_1D);
            evens = abs(ksN(:,even_column,z,t));
            evens_smoothed = imfilter(evens,gauss_1D);
            cross_corr = xcorr(odds_smoothed,evens_smoothed);     
            % Roughly find the maximum then find the precise maximum by
            % cubic interpolation
            [~,rough_max_zt(z,t)] = max(cross_corr);   
            roi_begin = rough_max_zt(z,t)-5;
            roi_end = rough_max_zt(z,t)+5;
            roi_corr = roi_begin:roi_end;
            interest_corr = cross_corr(roi_corr);
            roi_spline = roi_begin:inc:roi_end;
            spline_corr = spline(roi_corr,interest_corr,roi_spline);
            [~,precise_max_zt(z,t)] = max(spline_corr);
            precise_max_zt(z,t) = precise_max_zt(z,t)*inc+roi_begin-knx/2;
            % Interpolate the new Kspace
            for y=2:2:ny
                x=1:knx;
                Y=ksN(:,y,z,t);
                xi=(1:knx) + central_position - precise_max_zt(z,t);
                ksN(:,y,z,t) = interp1(x,Y,xi);
            end
        end
    end
    ksN(isnan(ksN)) = 0;    %eliminate the NaN
    
else
    ksP=IprimePc;
    ksN=IprimeNc;
end
clear IprimePc IprimeNc

%% ifft
disp('computing rspace')
for z=1:nz
    for t=1:nt
        U = ksP(:,:,z,t);
        rsP(:,:,z,t) = abs(fftshift((fft2(U))));
        U = ksN(:,:,z,t);
        rsN(:,:,z,t) = abs(fftshift((fft2(U))));
    end
end

%% Addition of rsP and rsN
rsP = rsP(end:-1:1,:,:,:);
rs = sqrt(rsP.^2+rsN.^2);
%% Display kspace and rspace
if param.display
    t=330; z=2;
    figure(4)
    for z=1:nz
        subplot(1,4,1); imagesc((abs(ksP(:,:,z,t)))); axis image; title(['log ksP z=' num2str(z) ' t=' num2str(t)]);
        subplot(1,4,2); imagesc(rsP(:,:,z,t)); axis image; title(['rsP z=' num2str(z) ' t=' num2str(t)]);
        subplot(1,4,3); imagesc((abs(ksN(:,:,z,t)))); axis image; title(['log ksN z=' num2str(z) ' t=' num2str(t)]);
        subplot(1,4,4); imagesc(rsN(:,:,z,t)); axis image; title(['rsN z=' num2str(z) ' t=' num2str(t)]);
        % subplot(1,5,5); imagesc(rs(:,:,z,t)); axis image; title(['rs z=' num2str(z) ' t=' num2str(t)]);
        colormap gray
%         pause;
    end
end
%% Display data_fdf and data_fid
data_kspace = ksP;
data_fid = rsP(knx/4:3*knx/4+1,[3*ny/4+1:ny 1:3*ny/4],:,:);
if param.fdf_comp
    if param.display
        figure(5)
        for t=1:nt
            for z=1:6
                subplot(3,6,z); imagesc(data_fdf(:,:,z,t)); axis image; title(['fdf z=' num2str(z) ' t=' num2str(t)],'fontsize',12);
                subplot(3,6,z+6); imagesc(abs(data_kspace(:,:,z,t))); axis image; title(['ksP z=' num2str(z) ' t=' num2str(t)],'fontsize',12);
                subplot(3,6,z+12); imagesc(data_fid(:,:,z,t)); axis image; title(['rsP z=' num2str(z) ' t=' num2str(t)],'fontsize',12);
                colormap gray
            end
            pause;
        end
    end
end
%% Save in .nii
if param.save_nii
    [pathstr, name, ext] = fileparts(fid_file);
    output_dir=[pathstr filesep name '_recon.nii' filesep];
    if ~exist(output_dir,'dir')
        mkdir(output_dir);
    end
    output_file_rs=[output_dir 'rs_xcorr_type' num2str(param.xcorr_type) '.nii'];
    output_file_ks=[output_dir 'ks_xcorr_type' num2str(param.xcorr_type) '.nii'];
    try
        disp(['Writing ' output_file_rs])
        aedes_write_nifti(data_fid,output_file_rs);
        disp(['Writing ' output_file_ks])
        aedes_write_nifti(data_kspace,output_file_ks);    
    catch exception
        errordlg(['unable to write ' output_file_rs])
    end
end
disp('done')